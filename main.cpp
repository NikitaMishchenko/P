#include <iostream>

#include <cmath>

#include <sstream> ///tistring

#include <stdio.h>
#include <stdlib.h>

#include <fstream>
#include <string>
#include <vector>
#include <queue>

#include <functional>
#include <thread>
#include <mutex>

#include "time.h"

#include "matrix.h"
#include "Osc_Class.h"
#include "osc.h"
#include "my_timer.h"

#include "manager.h"
#include "FFT.h"
#include "Approximation.h"

#include "equation_num.h"
#include "DifEq_Calc.h"

using namespace std;


void Make_Gnuplot_File_Pic_Plotter(string base_file_name, string name_add, string gnuplot_file_name)
{cout << "void Make_Gnuplot_File_Pic_Plotter(string base_file_name, string name_add, string gnuplot_file_name)\t" << base_file_name <<"\t" << gnuplot_file_name + ".txt" << "\t";
    ofstream fout(gnuplot_file_name + ".txt");
    fout << "#GENERATED by Make_Gnuplot_File_Pic_Plotter()" << endl;
        fout << "set terminal pngcairo size 800, 600;\nset grid;" << endl << endl;
        ///angle
        fout << "#ANGLE-TIME initial" << endl;
        fout << "set output \"" << base_file_name <<"_angle.png\""  << endl;
        fout << "set title \"No " << base_file_name <<" angle\""  << endl;
        fout << "set xlabel \'time, s\'"  << endl;
        fout << "set ylabel \'angle, deg\'"  << endl;
        fout << "plot \"" << base_file_name <<"_r.txt\" using 8:5 with lines" << endl;
        ///middle_angle
        fout << "#MIDDLE_ANGLE-TIME" << endl;
        fout << "set output \"" << base_file_name <<"_middle_angle.png\"" << endl;
        fout << "set title \"No " << base_file_name <<" middle angle x10, angle\"" << endl;
        fout << "set xlabel \'time, s\'" << endl;
        fout << "set ylabel \'angle, deg\'" << endl;
        fout << "plot \"" << base_file_name <<"_r_middle_angle.txt\" using 1:($5*10) with lines, "
                <<"\"" << base_file_name <<"_r.txt\" using 8:5 with lines" << endl;
        ///envelop
        fout << "#ENVELOP_ANGLE-TIME" << endl;
        fout << "set output \"" << base_file_name <<"_envelop_asb_envelop.png\"" << endl;
        fout << "set title \"No " << base_file_name <<" envelop envelop_a_s_b\"" << endl;
        fout << "set xlabel \'time, s\'" << endl;
        fout << "set ylabel \'angle, deg\'" << endl;
        fout << "plot \"" << base_file_name <<"_r_env_top_sm10.txt\" using 1:2 with lines, "
                << "\"" << base_file_name <<"_r_env_bot_sm10.txt\" using 1:2 with lines, "
                <<  "\"" << base_file_name <<"_r_asb_env_top_sm10.txt\" using 1:2 with lines, "
                <<  "\"" << base_file_name <<"_r_asb_env_bot_sm10.txt\" using 1:2 with lines" << endl;
        ///Redd procedure results
        fout << "#REDD_PROCEDURE_RESULTS" << endl;
        fout << "set output \"" << base_file_name <<"_Redd.png\"" << endl;
        fout << "set title \"No " << base_file_name <<" Redd proc result\"" << endl;
        fout << "set ylabel \'m_d_y_n\'" << endl;
        fout << "set xlabel \'angle, deg\'" << endl;
        fout << "plot \"" << base_file_name <<"_r_env_top_sm10_redd.txt\" using 2:3 with lines,"
            << "\"" << base_file_name <<"_r_env_bot_sm10_redd.txt\" using 2:3 with lines,"
            << "  \"" << base_file_name <<"_r_asb_env_top_sm10_redd.txt\" using 2:3 with lines, "
            << " \"" << base_file_name <<"_r_asb_env_bot_sm10_redd.txt\" using 2:3 with lines" << endl;


        fout << "#REDD_PROCEDURE_CUT_RESULTS" << endl;
        fout << "set output \"" << base_file_name <<"_Redd_cut.png\"" << endl;
        fout << "set title \"No " << base_file_name <<" Redd proc cut result\"" << endl;
        fout << "set ylabel \'m_d_y_n\'" << endl;
        fout << "set xlabel \'angle, deg\'" << endl;
        fout << "plot \"" << base_file_name <<"_asb_1_Redd_top_10.txt\" using 2:3 with lines, "
            << "\"" << base_file_name <<"_asb_1_Redd_top_10.txt\" using 2:3 with lines,"
            << "  \"" << base_file_name <<"_1_Redd_top_10.txt\" using 2:3 with lines, "
            << " \"" << base_file_name <<"_1_Redd_bot_10.txt\" using 2:3 with lines, "
            << "\"" << base_file_name <<"_asb_2_Redd_top_10.txt\" using 2:3 with lines, "
            << "\"" << base_file_name <<"_asb_2_Redd_top_10.txt\" using 2:3 with lines, "
            << "  \"" << base_file_name <<"_2_Redd_top_10.txt\" using 2:3 with lines, "
            << " \"" << base_file_name <<"_2_Redd_bot_10.txt\" using 2:3 with lines, "
            << "\"" << base_file_name <<"_asb_3_Redd_top_10.txt\" using 2:3 with lines, "
            << "\"" << base_file_name <<"_asb_3_Redd_top_10.txt\" using 2:3 with lines, "
            << "  \"" << base_file_name <<"_3_Redd_top_10.txt\" using 2:3 with lines, "
            << " \"" << base_file_name <<"_3_Redd_bot_10.txt\" using 2:3 with lines, "
            << "\"" << base_file_name <<"_asb_4_Redd_top_10.txt\" using 2:3 with lines, "
            << "\"" << base_file_name <<"_asb_4_Redd_top_10.txt\" using 2:3 with lines, "
            << "  \"" << base_file_name <<"_4_Redd_top_10.txt\" using 2:3 with lines, "
            << " \"" << base_file_name <<"_4_Redd_bot_10.txt\" using 2:3 with lines"
            << endl;

        /*fout << "#REDD_PROCEDURE_CUT_RESULTS" << endl;
        fout << "set output \"" << base_file_name <<"_Redd_cut.png\"" << endl;
        fout << "set title \"No " << base_file_name <<" Redd proc cut result\"" << endl;
        fout << "set ylabel \'m_d_y_n\'" << endl;
        fout << "set xlabel \'angle, deg\'" << endl;
        fout << "plot \"" << base_file_name <<"_r_env_top_sm10_redd.txt\" using 2:3 with lines,"
            << "\"" << base_file_name <<"_r_env_bot_sm10_redd.txt\" using 2:3 with lines,"
            << "  \"" << base_file_name <<"_r_asb_env_top_sm10_redd.txt\" using 2:3 with lines, "
            << " \"" << base_file_name <<"_r_asb_env_bot_sm10_redd.txt\" using 2:3 with lines" << endl;*/

        fout << "set output \"empt.png\"" << endl;
        fout << "plot x;" << endl;
    fout.close();//cout << "finished" << endl;
}

void Main_Loop()
{
    string s_buff, s_empt;

    cout << "Started. Enter \n\t\"1\" - data analisys, \n\t\"2\" - calculate d_eq_2order, \n\t\"3\" - FFT analysis, \"quit\" - quit program\n";
        cout << "*********************************************************\n\n";
    cin >> s_buff;
    while (s_buff != "quit")
    {
        if (s_buff == "1")
            manager_amplitude_analysis(manager_read("manager_test.txt"));

        if (s_buff == "2")
            Calc_VdP_equation_4_mdyn("", "r", "advanced_RK4", 000000);

        //if (s_buff == "3")
           // FFTAnalysis();
            cout << "\n*********************************************************\n";
        cout << "Finished. Enter \n\t\"1\" - data analisys, \n\t\"2\" - calculate d_eq_2order, \n\t\"3\" - FFT analysis, \"quit\" - quit program\n";
            cout << "*********************************************************\n\n";
        cin >> s_buff;
    }
    cout << clock() << endl;
    cout << "program finished\n";
}

int main()
{
    Main_Loop();
    ///********************************************MAIN**************************
   // manager m1;
    //m1.info_load_from_file();
   //     m1.Load_manager("C:/Base/Progs/Coeff_analysis/tester/manager1");
    //       cout << m1.get_info();
   // m1.Save_manager("C:/Base/Progs/Coeff_analysis/tester/manager12");
    //m1.create_load_from_file_fishfile("C:/Base/Progs/Coeff_analysis/tester/filefish");
    //cout << "is_correct = " << m1.reproceedable() << endl;
    ///********************************************MAIN**************************
}

    /*matrix A, B;
    A.Load_matrix("C:/Base/Progs/Coeff_analysis/tester/matrix_A.txt");
        B.Load_matrix("C:/Base/Progs/Coeff_analysis/tester/matrix_B.txt");
            cout << A << endl << B << endl << "result = \n" << A*B << endl;*/

    /*matrix m;
    m.Load_matrix("A.txt");
    cout << m << endl << endl;
    m.transpose(m);
    cout << m << endl;*/
